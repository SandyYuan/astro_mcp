How to use SPARCL
SPectra Analysis and Retrievable Catalog Lab (SPARCL)

Table of contents
Goals & Summary
Disclaimer & attribution
If necessary, install the most recent version of the SPARCL Client
Imports and setup
Authentication for Data Lab
Authentication for SPARCL
Data sets available in SPARCL
Get default field names
Get all field names
Data discovery I: using SPARCL's client.find() method
Data discovery II: using Data Lab's sparcl.main table
Retrieve records by sparcl_id using client.retrieve()
Retrieve records by specid using client.retrieve_by_specid()
Reorder spectrum records
Access fields in records
Convert retrieved output to Pandas DataFrame or Spectrum1D object
Plot spectra
Use client.missing() to find missing IDs in the SPARCL database

Goals & Summary
SPARCL (SPectra Analysis and Retrievable Catalog Lab) is an online service for discovery and retrieval of one-dimensional optical-infrared spectra (Juneau et al. 2024). SPARCL is designed to work for large survey datasets containing many millions of spectra, and to provide access to multiple different data sets through common methods. For more information, see the SPARCL User Guide.

This notebook provides a basic introduction to using the SPARCL client (or sparclclient) to find and retrieve spectroscopic data within a Python notebook context. The sparclclient connects to the SPARCL server at NSF NOIRLab and provides access to the contents of the SPARCL database.

To see the current data sets and number of spectra available in the SPARCL database, please visit the SPARCL summary page.

To get the latest sparclclient documentation, visit the sparclclient readthedocs site.

Feedback on SPARCL (questions, comments, science use cases, feature requests, bug reports, confusing error messages, etc.) can be submitted to datalab-spectro@noirlab.edu. For bug reports and confusing error messages, it's helpful if you include: a log of what you did, the result you got, and the result you expected.

See our science use-case notebooks that use SPARCL:

Introduction to DESI First Data Release (DR1) at the Astro Data Lab
Comparing SDSS and DESI spectra using SPARCL
Stacking SDSS Spectra of Galaxies Selected from the BPT Diagram
Multi-wavelength Image Cutouts and SDSS Spectra of Active Galaxies with Extreme Emission-Line Ratios
And our other How-To notebooks that use SPARCL:

Obtain spectra with SPARCL and plot them with Jdaviz
Obtain spectra with SPARCL and plot them with prospect

Disclaimer & attribution
Disclaimers
Note that using the Astro Data Lab constitutes your agreement with our minimal Disclaimers.

Acknowledgments
If you use Astro Data Lab in your published research, please include the text in your paper's Acknowledgments section:

This research uses services or data provided by the Astro Data Lab, which is part of the Community Science and Data Center (CSDC) Program of NSF NOIRLab. NOIRLab is operated by the Association of Universities for Research in Astronomy (AURA), Inc. under a cooperative agreement with the U.S. National Science Foundation.

If you use SPARCL jointly with the Astro Data Lab platform (via JupyterLab, command-line, or web interface) in your published research, please include this text below in your paper's Acknowledgments section:

This research uses services or data provided by the SPectra Analysis and Retrievable Catalog Lab (SPARCL) and the Astro Data Lab, which are both part of the Community Science and Data Center (CSDC) Program of NSF NOIRLab. NOIRLab is operated by the Association of Universities for Research in Astronomy (AURA), Inc. under a cooperative agreement with the U.S. National Science Foundation.

In either case please cite the following papers:

Data Lab concept paper: Fitzpatrick et al., "The NOAO Data Laboratory: a conceptual overview", SPIE, 9149, 2014, https://doi.org/10.1117/12.2057445

Astro Data Lab overview: Nikutta et al., "Data Lab - A Community Science Platform", Astronomy and Computing, 33, 2020, https://doi.org/10.1016/j.ascom.2020.100411

If you are referring to the Data Lab JupyterLab / Jupyter Notebooks, cite:

Juneau et al., "Jupyter-Enabled Astrophysical Analysis Using Data-Proximate Computing Platforms", CiSE, 23, 15, 2021, https://doi.org/10.1109/MCSE.2021.3057097
If publishing in a AAS journal, also add the keywords: \facility{Astro Data Lab} and \software{SPARCL (Juneau et al. 2024)}

And if you are using SPARCL, please also add the keyword \software{SPARCL (Juneau et al. 2024)} and cite:

Juneau et al., "SPARCL: SPectra Analysis and Retrievable Catalog Lab", Conference Proceedings for ADASS XXXIII, 2024 https://doi.org/10.48550/arXiv.2401.05576
The NOIRLab Library maintains lists of proper acknowledgments to use when publishing papers using the Lab's facilities, data, or services.


If necessary, install the most recent version of the SPARCL Client:
If you are using the Astro Data Lab Jupyter notebook server, you do not need to run this cell.

NOTE: After installing the most recent version, please restart your kernel.
## Uncomment the following only if SPARCL client is not already installed
#!pip install --upgrade sparclclient

Imports and setup
# SPARCL imports
from sparcl.client import SparclClient

# 3rd party imports
import numpy as np
import astropy.units as u
from specutils import Spectrum1D
from astropy.nddata import InverseVariance
from astropy.convolution import convolve, Gaussian1DKernel
%matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd

# Data Lab imports
from dl import queryClient as qc
from dl import authClient as ac
from getpass import getpass

# plots default setup
plt.rcParams['font.size'] = 14
plt.rcParams['figure.figsize'] = (14,8)

Authentication
Much of the functionality of Data Lab can be accessed without explicitly logging in (the service then uses an anonymous login). But some capacities, for instance saving the results of your queries to your virtual storage space, require a login (i.e. you will need a registered user account).

If you need to log in to Data Lab, un-comment the cell below and execute it:

#token = ac.login(input("Enter user name: (+ENTER) "),getpass("Enter password: (+ENTER) "))
#ac.whoAmI()
We now create a SPARCL client instance:
client = SparclClient()
client
(sparclclient:1.2.4, api:12.0, https://astrosparcl.datalab.noirlab.edu/sparc, client_hash=c2d5e218a26c43f503d93ab8d1d005aa46a58964, verbose=False, connect_timeout=1.1, read_timeout=5400.0)

Authentication for SPARCL
All public SPARCL data sets can be accessed without explicitly logging in. However, some data sets are private and can only be accessed by authorized users. If you are an authorized user and wish to login to SPARCL, un-comment the cell below and enter your NOIRLab CSDC SSO user name and password. If you need to create an account, sign-up at https://sso.csdc.noirlab.edu/account/signup/. If you encounter an issue, email datalab-spectro@noirlab.edu with your First Name, Last Name, and Email Address (the same one you used to create your NOIRLab CSDC SSO account).

To logout of SPARCL after a session, use:

client.logout()
For assistance with SPARCL authentication/authorization please contact us at datalab-spectro@noirlab.edu

#client.login(input("Enter SSO user name: (+ENTER) "),getpass("Enter password: (+ENTER) "))
View which data sets you have access to:
Note: if you are not logged in or if your SSO user name is not in the authorized list of SPARCL users, you will only see public data sets

client.authorized

Data sets available in SPARCL
List all currently available data sets from the server/url associated with client

client.all_datasets
{'BOSS-DR16',
 'BOSS-DR17',
 'DESI-DR1',
 'DESI-EDR',
 'SDSS-DR16',
 'SDSS-DR17',
 'SDSS-DR17-test'}

Get default field names
Gets fields tagged as 'default' that are common to all data sets in the dataset_list passed to the function. If dataset_list is None (the default), the function returns the intersection of 'default' fields across all datasets currently available in the SPARC database.

client.get_default_fields?
Signature: client.get_default_fields(*, dataset_list=None)
Docstring:
Get fields tagged as 'default' that are in DATASET_LIST.
These are the fields used for the DEFAULT value of the include
parameter of client.retrieve().

Args:
    dataset_list (:obj:`list`, optional): List of data sets from
        which to get the default fields. Defaults to None, which
        will return the intersection of default fields in all
        data sets hosted on the SPARCL database.

Returns:
    List of fields tagged as 'default' from DATASET_LIST.

Example:
    >>> client = SparclClient()
    >>> client.get_default_fields()
    ['dec', 'flux', 'ra', 'sparcl_id', 'specid', 'wavelength']
File:      /data0/sw/anaconda3/lib/python3.10/site-packages/sparcl/client.py
Type:      method
client.get_default_fields()
['dec', 'flux', 'ra', 'sparcl_id', 'specid', 'wavelength']

Get all field names
Gets fields tagged as 'all' that are common to all data sets in the dataset_list passed to the function. If dataset_list is None (the default), the function returns the intersection of 'all' fields across all datasets currently available in the SPARC database.

client.get_all_fields?
Signature: client.get_all_fields(*, dataset_list=None)
Docstring:
Get fields tagged as 'all' that are in DATASET_LIST.
These are the fields used for the ALL value of the include parameter
of client.retrieve().

Args:
    dataset_list (:obj:`list`, optional): List of data sets from
        which to get all fields. Defaults to None, which
        will return the intersection of all fields in all
        data sets hosted on the SPARCL database.

Returns:
    List of fields tagged as 'all' from DATASET_LIST.

Example:
    >>> client = SparclClient()
    >>> client.get_all_fields()
    ['data_release', 'datasetgroup', 'dateobs', 'dateobs_center', 'dec', 'exptime', 'flux', 'instrument', 'ivar', 'mask', 'model', 'ra', 'redshift', 'redshift_err', 'redshift_warning', 'site', 'sparcl_id', 'specid', 'specprimary', 'spectype', 'survey', 'targetid', 'telescope', 'wave_sigma', 'wavelength', 'wavemax', 'wavemin']
File:      /data0/sw/anaconda3/lib/python3.10/site-packages/sparcl/client.py
Type:      method
print(sorted(client.get_all_fields()))
['data_release', 'datasetgroup', 'dateobs', 'dateobs_center', 'dec', 'exptime', 'flux', 'instrument', 'ivar', 'mask', 'model', 'ra', 'redshift', 'redshift_err', 'redshift_warning', 'site', 'sparcl_id', 'specid', 'specprimary', 'spectype', 'survey', 'targetid', 'telescope', 'wave_sigma', 'wavelength', 'wavemax', 'wavemin']
print(sorted(client.get_all_fields(dataset_list=['SDSS-DR16', 'BOSS-DR16'])))
['ancillary_target1', 'ancillary_target2', 'anyandmask', 'anyormask', 'bluefiber', 'boss_specobj_id', 'boss_target1', 'boss_target2', 'calibflux', 'calibflux_ivar', 'chi68p', 'chunk', 'class_noqso', 'class_person', 'comments_person', 'cx', 'cy', 'cz', 'data_release', 'datasetgroup', 'dateobs', 'dateobs_center', 'dec', 'deredsn2', 'designid', 'dof', 'eboss_target0', 'eboss_target1', 'eboss_target2', 'eboss_target_id', 'elodie_bv', 'elodie_dof', 'elodie_feh', 'elodie_filename', 'elodie_logg', 'elodie_object', 'elodie_rchi2', 'elodie_sptype', 'elodie_teff', 'elodie_z', 'elodie_z_err', 'elodie_z_modelerr', 'exptime', 'fiberid', 'firstrelease', 'flux', 'fluxobjid', 'fracnsighi', 'fracnsiglo', 'fracnsigma', 'instrument', 'ivar', 'lambda_eff', 'legacy_target1', 'legacy_target2', 'marvels_target1', 'marvels_target2', 'mask', 'mjd', 'model', 'npoly', 'nspecobs', 'nturnoff', 'objid', 'plate', 'plateid', 'platequality', 'platerun', 'platesn2', 'primtarget', 'programname', 'ra', 'rchi2', 'rchi2diff', 'rchi2diff_noqso', 'redshift', 'redshift_err', 'redshift_warning', 'run1d', 'run2d', 'sectarget', 'segue1_target1', 'segue1_target2', 'segue2_target1', 'segue2_target2', 'site', 'sky', 'sn_median', 'sn_median_all', 'snturnoff', 'sourcetype', 'sparcl_id', 'spec1_g', 'spec1_i', 'spec1_r', 'spec2_g', 'spec2_i', 'spec2_r', 'specboss', 'special_target1', 'special_target2', 'specid', 'speclegacy', 'specprimary', 'specsdss', 'specsegue', 'specsegue1', 'specsegue2', 'spectroflux', 'spectroflux_ivar', 'spectrographid', 'spectroskyflux', 'spectrosynflux', 'spectrosynflux_ivar', 'spectype', 'subclass', 'subclass_noqso', 'survey', 'targetid', 'targetobjid', 'targettype', 'tcolumn', 'telescope', 'tfile', 'theta', 'thing_id', 'thing_id_targeting', 'tile', 'vdisp', 'vdisp_err', 'vdispchi2', 'vdispdof', 'vdispnpix', 'vdispz', 'vdispz_err', 'wave_sigma', 'wavelength', 'wavemax', 'wavemin', 'wcoverage', 'xfocal', 'yfocal', 'z_conf_person', 'z_err_noqso', 'z_noqso', 'z_person', 'zoffset', 'zwarning_noqso']
print(sorted(client.get_all_fields(dataset_list=['DESI-DR1'])))
['bgs_target', 'chi2', 'cmx_target', 'coadd_fiberstatus', 'coadd_numexp', 'coadd_numnight', 'coadd_numtile', 'coeff', 'data_release', 'datasetgroup', 'dateobs', 'dateobs_center', 'dec', 'deltachi2', 'desi_target', 'desiname', 'exptime', 'fa_target', 'fa_type', 'flux', 'healpix', 'instrument', 'ivar', 'main_nspec', 'main_primary', 'mask', 'mean_delta_x', 'mean_delta_y', 'mean_fiber_dec', 'mean_fiber_ra', 'mean_mjd', 'mean_psf_to_fiber_specflux', 'model', 'mws_target', 'ncoeff', 'npixels', 'numobs_init', 'objtype', 'obsconditions', 'plate_dec', 'plate_ra', 'pmdec', 'pmra', 'priority_init', 'program', 'ra', 'redshift', 'redshift_err', 'redshift_warning', 'ref_epoch', 'rms_delta_x', 'rms_delta_y', 'scnd_target', 'site', 'sparcl_id', 'specid', 'specprimary', 'spectype', 'spgrpval', 'std_fiber_dec', 'std_fiber_ra', 'subpriority', 'subtype', 'survey', 'sv1_bgs_target', 'sv1_desi_target', 'sv1_mws_target', 'sv1_scnd_target', 'sv2_bgs_target', 'sv2_desi_target', 'sv2_mws_target', 'sv2_scnd_target', 'sv3_bgs_target', 'sv3_desi_target', 'sv3_mws_target', 'sv3_scnd_target', 'sv_nspec', 'sv_primary', 'targetid', 'telescope', 'tsnr2_bgs', 'tsnr2_elg', 'tsnr2_gpbbackup', 'tsnr2_gpbbright', 'tsnr2_gpbdark', 'tsnr2_lrg', 'tsnr2_lya', 'tsnr2_qso', 'wave_sigma', 'wavelength', 'wavemax', 'wavemin', 'zcat_nspec']

Data discovery I: using SPARCL's client.find() method
The first way you can discover your data is by using SPARCL's client.find() method, which allows you to find records in the SPARCL database based on certain parameters passed to the function. Only Core fields may be in the outfields and constraints parameters. The descriptions for all fields, including Core fields, is located here. The SPARCL Core fields constraint types are:

Field name	Constraint type	Example
| data_release | List of allowed values
from SPARCL Categoricals | ['DESI-EDR', 'BOSS-DR16', 'SDSS-DR16'] | datasetgroup | List of allowed values
from SPARCL Categoricals | ['DESI', 'SDSS_BOSS'] | dateobs_center | Range of values | ['2013-03-14T10:16:17Z',
'2014-05-24T12:10:00Z'] | dec | Range of values | [2.03, 7.76] | exptime | Range of values | [3603.46, 3810.12] | instrument | List of allowed values
from SPARCL Categoricals | ['SDSS', 'BOSS', 'DESI'] | ra | Range of values (may not
"wrap" around RA=0) | [44.53, 47.96] | redshift | Range of values | [0.5, 0.9] | redshift_err | Range of values | [0.000225, 0.000516] | redshift_warning | List of values | [0, 3, 5] | sparcl_id | List of values (but not
intended for data discovery) | ['00001658-460c-4da1-987d-e493d8c9b89b',
'000017b6-56a2-4f87-8828-3a3409ba1083'] | site | List of allowed values
from SPARCL Categoricals | ['apo', 'kpno'] | specid | List of values | [6988698046080241664, 6971782884823945216] | spectype | List of allowed values
from SPARCL Categoricals | ['GALAXY', 'STAR', 'QSO'] | specprimary | List of values (but typically
would only include 1 if
being used for data
discovery constraints) | [1] | targetid | List of values | [1237679502171374316, 1237678619584692841] | telescope | List of allowed values
from SPARCL Categoricals | ['sloan25m', 'kp4m'] | wavemin | Range of values | [3607, 3608] | wavemax | Range of values | [10363, 10364]

client.find?
Signature:
client.find(
    outfields=None,
    *,
    constraints={},
    limit=500,
    sort=None,
    verbose=None,
)
Docstring:
Find records in the SPARCL database.

Args:
    outfields (:obj:`list`, optional): List of fields to return.
        Only CORE fields may be passed to this parameter.
        Defaults to None, which will return only the sparcl_id
        and _dr fields.

    constraints (:obj:`dict`, optional): Key-Value pairs of
        constraints to place on the record selection. The Key
        part of the Key-Value pair is the field name and the
        Value part of the Key-Value pair is a list of values.
        Defaults to no constraints. This will return all records in the
        database subject to restrictions imposed by the ``limit``
        parameter.

    limit (:obj:`int`, optional): Maximum number of records to
        return. Defaults to 500.

    sort (:obj:`list`, optional): Comma separated list of fields
        to sort by. Defaults to None. (no sorting)

    verbose (:obj:`bool`, optional): Set to True for in-depth return
        statement. Defaults to False.

Returns:
    :class:`~sparcl.Results.Found`: Contains header and records.

Example:
    >>> client = SparclClient()
    >>> outs = ['sparcl_id', 'ra', 'dec']
    >>> cons = {'spectype': ['GALAXY'], 'redshift': [0.5, 0.9]}
    >>> found = client.find(outfields=outs, constraints=cons)
    >>> sorted(list(found.records[0].keys()))
    ['_dr', 'dec', 'ra', 'sparcl_id']
File:      /data0/sw/anaconda3/lib/python3.10/site-packages/sparcl/client.py
Type:      method
Define the fields we want returned (outfields) and the constraints (constraints):
out = ['sparcl_id', 'ra', 'dec', 'redshift', 'spectype', 'data_release', 'redshift_err']
cons = {'spectype': ['GALAXY'],
        'redshift': [0.5, 0.9],
        'data_release': ['DESI-DR1', 'SDSS-DR16', 'BOSS-DR16']}
Execute the client.find() method with our parameters:
The limit argument here is being used for demonstration purposes only, and simply returns only the first 20 results here.

found_I = client.find(outfields=out, constraints=cons, limit=20)
["%s, %s, %f, %f, %f" % (f.sparcl_id, f.data_release, f.ra, f.redshift, f.redshift_err)
 for f in found_I.records]
['000003e8-8a05-11ef-a71d-525400f334e1, DESI-DR1, 60.007777, 0.782049, 0.000012',
 '00000411-8603-11ef-a5eb-525400f334e1, DESI-DR1, 209.980362, 0.642873, 0.000077',
 '00000f02-a2dc-11ee-ac91-525400ad1336, BOSS-DR16, 230.697100, 0.522124, 0.000107',
 '00001191-8bdd-11ef-b09e-525400f334e1, DESI-DR1, 125.558443, 0.839844, 0.000140',
 '0000187f-8bde-11ef-9bec-525400f334e1, DESI-DR1, 124.402481, 0.871175, 0.000003',
 '000019a8-8669-11ef-a9c4-525400f334e1, DESI-DR1, 199.708772, 0.740890, 0.000229',
 '00001b3a-a41b-11ee-8210-525400ad1336, BOSS-DR16, 9.635124, 0.542893, 0.000181',
 '00001cb5-87ee-11ef-bcb3-525400f334e1, DESI-DR1, 198.183387, 0.787802, 0.000003',
 '00001fc6-85f3-11ef-ba36-525400f334e1, DESI-DR1, 224.281279, 0.548497, 0.000099',
 '000021bf-88ae-11ef-a6c2-525400f334e1, DESI-DR1, 339.684280, 0.774977, 0.000302',
 '00002380-8a7c-11ef-9881-525400f334e1, DESI-DR1, 121.999478, 0.808449, 0.000036',
 '00002da0-8b8d-11ef-ba9d-525400f334e1, DESI-DR1, 32.640943, 0.688018, 0.000130',
 '00002f25-8613-11ef-ad4e-525400f334e1, DESI-DR1, 203.452070, 0.856671, 0.000025',
 '0000321e-a4a9-11ee-bde8-525400ad1336, BOSS-DR16, 228.064370, 0.631113, 0.000165',
 '000038b4-8786-11ef-a3b2-525400f334e1, DESI-DR1, 162.411482, 0.763255, 0.000130',
 '00004072-8b77-11ef-b0fa-525400f334e1, DESI-DR1, 38.812972, 0.520902, 0.000074',
 '000041af-a296-11ee-9b05-525400ad1336, BOSS-DR16, 203.071870, 0.572525, 0.000165',
 '00004954-a46e-11ee-b0bd-525400ad1336, BOSS-DR16, 143.997260, 0.833832, 0.000309',
 '00004a45-8810-11ef-992f-525400f334e1, DESI-DR1, 123.011984, 0.820051, 0.000028',
 '00004bbf-a42c-11ee-9dd6-525400ad1336, BOSS-DR16, 6.668670, 0.754319, 0.000283']

Data discovery II: using Data Lab's sparcl.main table
The second way you can discover your data is by querying the sparcl.main table hosted at Astro Data Lab. This table contains the following columns:

print(qc.schema('sparcl.main'))
Schema: sparcl
 Table: main

     Column Name   Description
     -----------   -----------
            elon   Ecliptic longitude
            elat   Ecliptic latitude
            glon   Galactic longitude
            glat   Galactic latitude
        redshift   Observed redshift, or radial velocity in units of redshift
              ra   Right Ascension in degrees
             dec   Declination in degrees
         wavemin   Minimum value of wavelength coverage
         wavemax   Maximum value of wavelength coverage
    redshift_err   Uncertainty on the observed redshift, or radial velocity i
                   n units of redshift
        targetid   Dataset-specific photometric target identifier
          specid   Dataset-specific spectrum identifier (may not be unique)
         exptime   Exposure time in seconds
       random_id   Random ID in the range 0 to 100 (decimal)
            htm9   HTM Level-9 index
         ring256   Healpix ID with nside 256, ring schema
        nest4096   Healpix ID with nside 4096, nested schema
redshift_warning   Bitmask with warning on redshift result
     specprimary   Whether an entry is the primary spectrum for a given targe
                   t object
    datasetgroup   Human-readable common name for a coherent set of spectra t
                   hat go together
        spectype   Spectral type of the object (STAR, GALAXY, QSO)
      instrument   Instrument used for observation
       sparcl_id   Universally Unique Identifier for spectrum in SPARCL
       telescope   Telescope used for the observation
            site   Site of observations
    data_release   Data release of a given record
  dateobs_center   Central value of the dateobs range
         dateobs   Range of observational dates for a given spectrum (single 
                   value for a single date)

Query this table for a few rows of data:
q = """SELECT 
            sparcl_id, specid, ra, dec, redshift, spectype, data_release, redshift_err
        FROM 
            sparcl.main
        WHERE 
            spectype='GALAXY'
            AND redshift>=0.5 AND redshift<=0.9
            AND random_id BETWEEN 15.1 AND 15.4
        LIMIT 20
    """
found_II = qc.query(sql=q, fmt='pandas')  # output as Pandas DataFrame
found_II
sparcl_id	specid	ra	dec	redshift	spectype	data_release	redshift_err
0	9a5016c0-a1db-11ee-b15c-525400ad1336	6802933904984788992	238.053390	43.941233	0.615950	GALAXY	BOSS-DR16	0.000154
1	414c359e-9d07-11ee-9b9b-525400ad1336	39633149608592885	237.243397	44.080806	0.618849	GALAXY	DESI-EDR	0.000064
2	c1156072-a1cb-11ee-953a-525400ad1336	6767971084522508288	211.972990	28.694906	0.548824	GALAXY	BOSS-DR16	0.000149
3	911ab2b7-9f3e-11ee-a597-525400ad1336	1426690603265058816	128.166450	28.023924	0.633630	GALAXY	SDSS-DR16	0.315646
4	53478e46-9b67-11ee-b77b-525400ad1336	39627769637766794	180.563917	-0.716587	0.863014	GALAXY	DESI-EDR	0.000049
5	a7a49bf4-9f60-11ee-ab7b-525400ad1336	4536428664930455552	217.293440	-1.445119	0.535872	GALAXY	BOSS-DR16	0.000204
6	1f3410af-a0f5-11ee-a5bf-525400ad1336	5862600223436853248	242.419380	7.977997	0.524114	GALAXY	BOSS-DR16	0.000151
7	976845d0-a3d8-11ee-9ae7-525400ad1336	8633450365726248960	353.990980	23.535728	0.653509	GALAXY	BOSS-DR16	0.000196
8	0699dae7-a508-11ee-bfb9-525400ad1336	-8071304449020899328	346.124650	-0.927300	0.654820	GALAXY	BOSS-DR16	0.000182
9	1ff6f4e6-a560-11ee-bfda-525400ad1336	-7692018839834046464	143.933660	18.334093	0.785994	GALAXY	BOSS-DR16	0.000080
10	cacfb6c2-9fca-11ee-9c39-525400ad1336	4911301385507852288	344.297430	-2.604723	0.566902	GALAXY	BOSS-DR16	0.000245
11	3944b361-a29a-11ee-80c7-525400ad1336	7471599706856247296	186.331270	44.257821	0.614164	GALAXY	BOSS-DR16	0.000132
12	5552bd48-9b66-11ee-82d6-525400ad1336	39633285986387037	177.668864	52.529184	0.688995	GALAXY	DESI-EDR	0.000081
13	9673af20-a31a-11ee-9be2-525400ad1336	8001969487737016320	174.226020	61.472635	0.505193	GALAXY	BOSS-DR16	0.000056
14	c6c14db9-9e52-11ee-b3e4-525400ad1336	-6882417905396068352	158.575220	33.747348	0.709140	GALAXY	BOSS-DR16	0.000151
15	3bf03614-9e8f-11ee-8611-525400ad1336	-6158471691026280448	248.887370	33.071720	0.892999	GALAXY	BOSS-DR16	0.000112
16	6bdd212c-a04d-11ee-8e4d-525400ad1336	5299835806479044608	201.163590	40.816210	0.507812	GALAXY	BOSS-DR16	0.000099
17	67d8f85f-a4fe-11ee-8915-525400ad1336	-8111943498295128064	358.573430	2.079838	0.669183	GALAXY	BOSS-DR16	0.000209
18	35242386-a3fd-11ee-b362-525400ad1336	8717889569062932480	6.020312	34.411377	0.541011	GALAXY	BOSS-DR16	0.000335
19	291837e0-9f27-11ee-b62a-525400ad1336	4330408768305385472	184.548990	0.780102	0.570419	GALAXY	BOSS-DR16	0.000150

Retrieve records by sparcl_id using client.retrieve()
In order to retrieve spectra records from SPARCL by sparcl_id, pass the following to the client.retrieve() method:

uuid_list : List of SPARCL IDs.
dataset_list : List of data sets to search for the SPARCL IDs in (default: None, which will search all available data sets).
include : List of field names to include in each record (default: 'DEFAULT').
limit : Maximum number of records to return (default: 500). Max allowed is 24,000.

NOTE: A reasonable amount of records to request retrieval of is about 10,000. Exceeding this value may cause the retrieval to timeout or fail.

client.retrieve?
Signature:
client.retrieve(
    uuid_list,
    *,
    include='DEFAULT',
    dataset_list=None,
    limit=500,
    verbose=None,
)
Docstring:
Retrieve spectra records from the SPARCL database by list of
sparcl_ids.

Args:
    uuid_list (:obj:`list`): List of sparcl_ids.

    include (:obj:`list`, optional): List of field names to include
        in each record. Defaults to 'DEFAULT', which will return
        the fields tagged as 'default'.

    dataset_list (:obj:`list`, optional): List of data sets from
        which to retrieve spectra data. Defaults to None, meaning all
        data sets hosted on the SPARCL database.

    limit (:obj:`int`, optional): Maximum number of records to
        return. Defaults to 500. Maximum allowed is 24,000.

    verbose (:obj:`bool`, optional): Set to True for in-depth return
        statement. Defaults to False.

Returns:
    :class:`~sparcl.Results.Retrieved`: Contains header and records.

Example:
    >>> client = SparclClient()
    >>> ids = client.find(limit=1).ids
    >>> inc = ['sparcl_id', 'flux', 'wavelength', 'model']
    >>> ret = client.retrieve(uuid_list=ids, include=inc)
    >>> type(ret.records[0].wavelength)
    <class 'numpy.ndarray'>
File:      /data0/sw/anaconda3/lib/python3.10/site-packages/sparcl/client.py
Type:      method
Use the sparcl_ids from the output of using client.find() to retrieve records from SPARCL:
Note that ids in found_I.ids is a property name of the Found class. It is a list of records from all records, not a field name of a record.

# Define the fields to include in the retrieve function
inc = ['sparcl_id', 'specid', 'data_release', 'redshift', 'flux',
       'wavelength', 'model', 'ivar', 'mask', 'spectype', 'ra', 'dec']
ids_I = found_I.ids
results_I = client.retrieve(uuid_list=ids_I, include=inc)
results_I.info
{'status': {'success': True,
  'info': ["Successfully found 20 records in dr_list={'DESI-EDR', 'BOSS-DR16', 'SDSS-DR16', 'DESI-DR1'}"],
  'warnings': []}}

Retrieve records by specid using client.retrieve_by_specid()
In order to retrieve spectra records from SPARCL by specid, pass the following to the client.retrieve_by_specid() method:

specid_list : List of specIDs.
dataset_list : List of data sets to search for the specIDs in (default: None, which will search all available data sets).
include : List of field names to include in each record (default: 'DEFAULT').
limit : Maximum number of records to return (default: 500). Max allowed is 24,000.

NOTE: A reasonable amount of records to request retrieval of is about 10,000. Exceeding this value may cause the retrieval to timeout or fail.

client.retrieve_by_specid?
Signature:
client.retrieve_by_specid(
    specid_list,
    *,
    svc='spectras',
    format='pkl',
    include='DEFAULT',
    dataset_list=None,
    limit=500,
    verbose=False,
)
Docstring:
Retrieve spectra records from the SPARCL database by list of
specids.

Args:
    specid_list (:obj:`list`): List of specids.

    include (:obj:`list`, optional): List of field names to include
        in each record. Defaults to 'DEFAULT', which will return
        the fields tagged as 'default'.

    dataset_list (:obj:`list`, optional): List of data sets from
        which to retrieve spectra data. Defaults to None, meaning all
        data sets hosted on the SPARCL database.

    limit (:obj:`int`, optional): Maximum number of records to
        return. Defaults to 500. Maximum allowed is 24,000.

    verbose (:obj:`bool`, optional): Set to True for in-depth return
        statement. Defaults to False.

Returns:
    :class:`~sparcl.Results.Retrieved`: Contains header and records.

Example:
    >>> client = SparclClient()
    >>> sids = [5840097619402313728, -8985592895187431424]
    >>> inc = ['specid', 'flux', 'wavelength', 'model']
    >>> ret = client.retrieve_by_specid(specid_list=sids, include=inc)
    >>> len(ret.records[0].wavelength)
    4617
File:      /data0/sw/anaconda3/lib/python3.10/site-packages/sparcl/client.py
Type:      method
Use the specIDs from the sparcl.main table to retrieve records from SPARCL:
We first need to convert the Pandas Series of specIDs into an int list to work with SPARCL. Then we can pass the int list to the client.retrieve_by_specid() method.

specids = [int(s) for s in found_II.specid]
results_II = client.retrieve_by_specid(specid_list=specids, include=inc)
results_II.info
{'status': {'success': True,
  'info': ["Successfully found 24 records in dr_list={'DESI-EDR', 'BOSS-DR16', 'SDSS-DR16', 'DESI-DR1'}"],
  'warnings': []}}

Reorder spectrum records
The ordering of the results of client.retrieve() is not necessarily sorted to match the order of the IDs in the argument passed to the method. The reorder() method will reorder the retrieved results to be in the same order as the original list of IDs passed to client.retrieve().

Reorder SPARCL IDs:
ids_II = list(found_II.sparcl_id[1:4])
print(f"Order of SPARCL IDs originally:\n{ids_II}\n")

res = client.retrieve(uuid_list=ids_II)
res_ids = [f.sparcl_id for f in res.records]
print(f"Order of SPARCL IDs after passing to retrieve():\n{res_ids}\n")

res_reordered = res.reorder(ids_II)
res_reordered_ids = [f.sparcl_id for f in res_reordered.records]
print(f"Use reorder() to obtain original order of SPARCL IDs:\n{res_reordered_ids}")
Order of SPARCL IDs originally:
['414c359e-9d07-11ee-9b9b-525400ad1336', 'c1156072-a1cb-11ee-953a-525400ad1336', '911ab2b7-9f3e-11ee-a597-525400ad1336']

Order of SPARCL IDs after passing to retrieve():
['414c359e-9d07-11ee-9b9b-525400ad1336', '911ab2b7-9f3e-11ee-a597-525400ad1336', 'c1156072-a1cb-11ee-953a-525400ad1336']

Use reorder() to obtain original order of SPARCL IDs:
['414c359e-9d07-11ee-9b9b-525400ad1336', 'c1156072-a1cb-11ee-953a-525400ad1336', '911ab2b7-9f3e-11ee-a597-525400ad1336']

Access fields in records
You can access the fields from records by using dot notation and dictionary indexing.

Accessing a record from our example using client.find() and client.retrieve():
records_I = results_I.records[0]

id_I = records_I.sparcl_id
data_release_I = records_I.data_release
redshift_I = records_I.redshift
flux_I = records_I.flux
wavelength_I = records_I.wavelength
model_I = records_I.model
ivar_I = records_I.ivar
mask_I = records_I.mask
spectype_I = records_I.spectype

Convert retrieved output to Pandas DataFrame or Spectrum1D object
Pandas DataFrame:
df = pd.DataFrame([[r.sparcl_id, r.redshift, r.wavelength, r.flux,]
                    for r in results_I.records],
                  columns=['sparcl_id', 'redshift', 'wavelength', 'flux'])
df
sparcl_id	redshift	wavelength	flux
0	000003e8-8a05-11ef-a71d-525400f334e1	0.782049	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[-0.3382928967475891, 0.03231602534651756, 4.3...
1	00000411-8603-11ef-a5eb-525400f334e1	0.642873	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[0.26915818452835083, -0.8770749568939209, -1....
2	00000f02-a2dc-11ee-ac91-525400ad1336	0.522124	[3568.617492834813, 3569.439291988468, 3570.26...	[7.6649274826049805, 7.667514324188232, 7.6701...
3	00001191-8bdd-11ef-b09e-525400f334e1	0.839844	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[-1.0818794965744019, 0.3140740692615509, -0.8...
4	0000187f-8bde-11ef-9bec-525400f334e1	0.871175	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[3.0448248386383057, -1.3573006391525269, -2.3...
5	000019a8-8669-11ef-a9c4-525400f334e1	0.740890	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[2.723160743713379, 3.4022016525268555, -1.188...
6	00001b3a-a41b-11ee-8210-525400ad1336	0.542893	[3570.2612803901543, 3571.0834580834608, 3571....	[4.828716278076172, 4.829677581787109, 4.83063...
7	00001cb5-87ee-11ef-bcb3-525400f334e1	0.787802	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[0.23685233294963837, -1.0375943183898926, 2.0...
8	00001fc6-85f3-11ef-ba36-525400f334e1	0.548497	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[1.5522009134292603, -3.1973671913146973, -1.6...
9	000021bf-88ae-11ef-a6c2-525400f334e1	0.774977	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[3.2808167934417725, -0.9528359770774841, -6.6...
10	00002380-8a7c-11ef-9881-525400f334e1	0.808449	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[-0.5737500190734863, -5.435103893280029, 0.79...
11	00002da0-8b8d-11ef-ba9d-525400f334e1	0.688018	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[-1.1429494619369507, 5.829587459564209, -0.20...
12	00002f25-8613-11ef-ad4e-525400f334e1	0.856671	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[-3.895395278930664, 2.955808162689209, 7.2484...
13	0000321e-a4a9-11ee-bde8-525400ad1336	0.631113	[3592.5266624766173, 3593.353967553901, 3594.1...	[-2.767551898956299, -2.7674343585968018, -2.7...
14	000038b4-8786-11ef-a3b2-525400f334e1	0.763255	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[-1.953926682472229, -1.743704915046692, 0.765...
15	00004072-8b77-11ef-b0fa-525400f334e1	0.520902	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[1.5336757898330688, -1.4600194692611694, -0.8...
16	000041af-a296-11ee-9b05-525400ad1336	0.572525	[3562.049907308445, 3562.8701940455303, 3563.6...	[6.18538236618042, 6.185926914215088, 6.186471...
17	00004954-a46e-11ee-b0bd-525400ad1336	0.833832	[3569.4392919884644, 3570.2612803901543, 3571....	[-1.1925723552703857, -1.1927012205123901, -1....
18	00004a45-8810-11ef-992f-525400f334e1	0.820051	[3600.0, 3600.8, 3601.6000000000004, 3602.4000...	[-0.0031879995949566364, 3.8128466606140137, 2...
19	00004bbf-a42c-11ee-9dd6-525400ad1336	0.754319	[3567.795882885623, 3568.617492834813, 3569.43...	[0.38861986994743347, 3.381983995437622, 0.267...
Spectrum1D:
When applicable, the units for each field are documented on the Fields tab of the astrosparcl website

specs = [Spectrum1D(spectral_axis = r.wavelength*u.AA,
                    flux = np.array(r.flux)* 10**-17 * u.Unit('erg cm-2 s-1 AA-1'),
                    uncertainty = InverseVariance(np.array(r.ivar)),
                    redshift = r.redshift,
                    mask = r.mask)
        for r in results_I.records]
specs[0]
<Spectrum1D(flux=[-3.3829289674758912e-18 ... 5.723837018013001e-18] erg / (Angstrom s cm2) (shape=(7781,), mean=0.00000 erg / (Angstrom s cm2)); spectral_axis=<SpectralAxis 
   (observer to target:
      radial_velocity=156203.36972055217 km / s
      redshift=0.782049304010783)
  [3600.  3600.8 3601.6 ... 9822.4 9823.2 9824. ] Angstrom> (length=7781); uncertainty=InverseVariance)>
# Plot a couple
f, ax = plt.subplots()  
ax.step(specs[0].spectral_axis, specs[0].flux) 
ax.step(specs[1].spectral_axis, specs[1].flux)
plt.show()


Plot spectra
def plot_spec(index, results):
    """
    Pass an index value and the output from using client.retrieve()
    to plot the spectrum at the specified index.
    """
    
    record = results.records[index]

    sparcl_id = record.sparcl_id
    data_release = record.data_release
    flux = record.flux
    wavelength = record.wavelength
    model = record.model
    spectype = record.spectype
    redshift = record.redshift
    ra = record.ra
    dec = record.dec

    plt.title(f"Data Set = {data_release}\n"
              f"Type = {spectype}\n"
              f"ID = {sparcl_id}\n"
              f"Redshift = {redshift}\n"
              f"RA = {ra}\n"
              f"Dec = {dec}", loc='left')
    plt.xlabel('$\lambda\ [\AA]$')
    plt.ylabel('$f_{\lambda}$ $(10^{-17}$ $erg$ $s^{-1}$ $cm^{-2}$ $\AA^{-1})$')
    
    # Plot unsmoothed spectrum in grey
    plt.plot(wavelength, flux, color='k', alpha=0.2, label='Unsmoothed spectrum')
    
    # Overplot spectrum smoothed using a 1-D Gaussian Kernel in black
    plt.plot(wavelength, convolve(flux, Gaussian1DKernel(5)), color='k', label='Smoothed spectrum')
    
    # Overplot the model spectrum in red
    plt.plot(wavelength, model, color='r', label='Model spectrum')
    
    plt.legend()
    plt.show()
plot_spec(index=5, results=results_I)


Use client.missing() to find missing SPARCL IDs in the SPARCL database
client.missing?
Signature:
client.missing(
    uuid_list,
    *,
    dataset_list=None,
    countOnly=False,
    verbose=False,
)
Docstring:
Return the subset of sparcl_ids in the given uuid_list that are
NOT stored in the SPARCL database.

Args:
    uuid_list (:obj:`list`): List of sparcl_ids.

    dataset_list (:obj:`list`, optional): List of data sets from
        which to find missing sparcl_ids. Defaults to None, meaning
        all data sets hosted on the SPARCL database.

    countOnly (:obj:`bool`, optional): Set to True to return only
        a count of the missing sparcl_ids from the uuid_list.
        Defaults to False.

    verbose (:obj:`bool`, optional): Set to True for in-depth return
        statement. Defaults to False.

Returns:
    A list of the subset of sparcl_ids in the given uuid_list that
    are NOT stored in the SPARCL database.

Example:
    >>> client = SparclClient()
    >>> ids = ['ddbb57ee-8e90-4a0d-823b-0f5d97028076',]
    >>> client.missing(ids)
    ['ddbb57ee-8e90-4a0d-823b-0f5d97028076']
File:      /data0/sw/anaconda3/lib/python3.10/site-packages/sparcl/client.py
Type:      method
When you try to retrieve records from the SPARCL database with IDs that do not exist in the SPARCL database, a warning message will appear:
ids_test = ['000025da-914b-4b67-b9a9-97cc811b0459',
            '0000fabc-0e15-4d76-b44c-4f152f31de09',
            '00001c20-b7ff-4367-af08-26432cd7e01d',
            '0000403e-51da-43b0-a0e9-e806ea31ca9e',
            'ddbb57ee-8e90-4a0d-823b-0f5d97028076']

res_test = client.retrieve(uuid_list=ids_test)
/tmp/ipykernel_1398583/2568251338.py:7: UserWarning: Some UUIDs were not found. 5 out of the 500 requested uuids have no records available in the SPARCL database associated with DataSets {'DESI-EDR', 'BOSS-DR16', 'SDSS-DR16', 'DESI-DR1'}.Use "client.missing()" to get a list of the 5 unavailable uuids.
  res_test = client.retrieve(uuid_list=ids_test)
In order to figure out which of the IDs from your list do not exist in the SPARCL database, use the client.missing() method:
client.missing(uuid_list=ids_test)
['0000fabc-0e15-4d76-b44c-4f152f31de09',
 'ddbb57ee-8e90-4a0d-823b-0f5d97028076',
 '00001c20-b7ff-4367-af08-26432cd7e01d',
 '000025da-914b-4b67-b9a9-97cc811b0459',
 '0000403e-51da-43b0-a0e9-e806ea31ca9e']